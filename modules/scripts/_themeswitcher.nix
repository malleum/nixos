{
  pkgs,
  lib,
  ...
}: let
  themes = import ../style/_themes.nix {inherit pkgs;};

  wallpaper-script = lib.concatMapStringsSep "\n" (name: ''
    case "${name}"; swww img "${themes.${name}.image}" --transition-type any --transition-fps 60
  '') (lib.attrNames themes);

  # 1. NEW: Generate a simple, clean data file with theme names and image paths.
  #    We use a pipe '|' as a safe separator.
  themeDataFile = pkgs.writeText "rofi-theme-data.txt" (
    lib.concatMapStringsSep "\n" (
      name: "${name}|${themes.${name}.image}"
    ) (lib.attrNames themes)
  );
in
  pkgs.writers.writeFishBin "themeswitcher" ''
    # The user's existing functions are kept inside this script
    function set_wallpaper
        switch $argv[1]
            ${wallpaper-script}
        end
    end

    function theme
        sudo "/nix/var/nix/profiles/system/specialisation/$argv[1]/bin/switch-to-configuration" switch & disown
        set_wallpaper $argv[1]
    end


    # --- Main Script Logic ---

    # This function reads the data file and generates the rofi input.
    function generate_rofi_input
        # Read the data file generated by Nix, line by line
        while read -l line
            # Split the line into a 'name' and 'path' at the '|'
            set parts (string split '|' -- "$line")
            set name $parts[1]
            set path $parts[2]

            printf '%s\0icon\x1f%s\n' "$name" "$path"
        end < "${themeDataFile}"
    end

    # Pipe the output of our function into Rofi
    set FULL_SELECTION (generate_rofi_input | rofi -dmenu -i -p "theme")

    # Check if the user made a selection
    if test -n "$FULL_SELECTION"
        # Extract the theme name (the part before the null byte)
        set THEME_NAME (string split '\0' -- "$FULL_SELECTION")[1]

        # Call the theme function with the clean name
        theme "$THEME_NAME"
    end
  ''
